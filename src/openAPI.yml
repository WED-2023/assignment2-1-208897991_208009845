openapi: 3.0.3
info:
  title: Recipe Management API
  description: API for managing recipes, user authentication, and other related functionalities
  version: 1.0.0
  contact:
    name: Chen Frydman
    email: chenfrydman@gmail.com

tags:
  - name: User
    description: Endpoints related to user management
  - name: Recipe
    description: Endpoints related to recipe management
  - name: Website
    description: Endpoints related to different pages

  
paths:
  /: #main page
    get:
      tags:
        - Website
      summary: Retrieve the main page
      responses:
        '200':
          description: Main page content
                
  /RegisterPage:
    get:
      tags:
        - User
      summary: Get the registration page
      responses:
        '200':
          description: Registration page content
    post:
      tags:
        - User
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Register'
              description: User to register
      responses:
        '201':
          description: User registered
        '400':
          description: Bad request
        
  /LoginPage:
    get:
      tags:
        - User
      summary: Get the login page
      responses:
        '200':
          description: Login page content
  
    post:
      tags:
        - User
      summary: Authenticate a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
      responses:
        '200':
          description: User authenticated
        '401':
          description: Unauthorized
          
  /AboutPage:
    get:
      summary: Get About Page Information
      description: Retrieve information about the About Page, including details about the company, mission, history, and team.
      tags:
        - Website
      responses:
        '200':
          description: Successfully retrieved the About Page information.
  
  /SearchPage:
    get:
      summary: Get Search Page Information
      description: Retrieve information about the Search Page, including search functionality and filters.
      tags:
        - Recipes
      responses:
        '200':
          description: Successfully retrieved the Search Page information.
    post:
      summary: Search for recipes
      description: Search for recipes based on user input and filters.
      tags:
        - Recipes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                query:
                  type: string
                  description: The search query
                  example: pasta
                amount:
                  description: The number of results to return
                  example: 10
                  type: integer
                  enum: [5, 10, 15]
                filter:
                  type: string
                  description: Filter the recipes by dietary preferences
                  example: vegetarian
                  enum: ["No filter", "Vegetarian", "Vegan"," Gluten Free"]
              required:
                - query
      responses:
        '200':
          description: Successfully retrieved search results.
        '404':
          description: No recipes found.


  /RecipeViewPage/{recipeId}:
    get:
      tags:
        - Recipe
      summary: Retrieve a specific recipe by ID
      parameters:
        - name: recipeId
          in: path
          required: true
          schema:
            type: integer
          example: 746382
            
      responses:
        '200':
          description: Recipe details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Recipe'
        '404':
          description: Recipe not found

  /FavoritesPage:
    get:
      tags:
        - User
      summary: Retrieve a list of favorite recipes
      responses:
        '200':
          description: A list of favorite recipes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecipeList'
        

  /MyRecipesPage:
    get:
      tags:
        - User
      summary: Retrieve a list of user's own recipes
      responses:
        '200':
          description: A list of user's recipes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecipeList'

  /FamilyRecipesPage:
    get:
      tags:
        - user
        - recipe
      summary: Retrieve a list of family recipes
      responses:
        '200':
          description: A list of family recipes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecipeList'

  /recipePreparingPage/{recipeId}:
    get:
      tags:
        - Recipe
      summary: Retrieve a specific recipe by ID for preparing
      parameters:
        - name: recipeId
          in: path
          required: true
          schema:
            type: integer
          example: 746382
      responses:
        '200':
          description: Recipe details for preparing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Recipe'
        '404':
          description: Recipe not found

components:
  schemas:
    Register:
      type: object
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 8
          description: username contains between 3 to 8 letters only
          example: ofirtami
        firstname:
          type: string
          description: user's first name
          example: Stefani
        lastname:
          type: string
          description: user's last name
          example: Germanotta
        country:
          type: string
          description: user's country
          example: Israel
        password:
          type: string
          minLength: 3
          maxLength: 8
          format: password
          description: |
            password contains between 3 to 8 chars,
            at least one of them is a number and a special char
          example: joanne@
        email:
          type: string
          format: email
          description: user's email
          example: ofirtamir@gmail.com
      required:
        - username
        - email
        - password

    Login:
      type: object
      properties:
        email:
          type: string
          format: email
          description: user's email
          example: ofirtamir@gmail.com
        password:
          type: string
          minLength: 3
          maxLength: 8
          format: password
          description: |
            password contains between 3 to 8 chars,
            at least one of them is a number and a special char
          example: joanne
      required:
        - email
        - password

    Recipe:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        ingredients:
          type: array
          items:
            type: string
        instructions:
          type: string
        favorite:
          type: boolean

    RecipeList:
      type: array
      items:
        $ref: '#/components/schemas/Recipe'


servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/CHENFRYDMAN_1/recipes/1.0.0